// Aleksey Kuznetsov <alek-kuzne@yandex.ru>

// Урок 3. Виртуальные функции и полиморфизм

#include <iostream>
#include "figures.h"
#include "cars.h"
#include "fraction.h"

// 1. Создать абстрактный класс Figure (фигура). Его наследниками являются классы Parallelogram (параллелограмм) и Circle (круг).
// Класс Parallelogram — базовый для классов Rectangle (прямоугольник), Square (квадрат), Rhombus (ромб). Для всех классов создать конструкторы.
// Для класса Figure добавить чисто виртуальную функцию area() (площадь). Во всех остальных классах переопределить эту функцию,
// исходя из геометрических формул нахождения площади.


// 2. Создать класс Car (автомобиль) с полями company (компания) и model (модель). Классы-наследники: PassengerCar (легковой автомобиль) и Bus (автобус).
// От этих классов наследует класс Minivan (минивэн). Создать конструкторы для каждого из классов, чтобы они выводили данные о классах.
// Создать объекты для каждого из классов и посмотреть, в какой последовательности выполняются конструкторы. Обратить внимание на проблему «алмаз смерти».
// Примечание: если использовать виртуальный базовый класс, то объект самого "верхнего" базового класса создает самый "дочерний" класс.


// 3. Создать класс: Fraction (дробь). Дробь имеет числитель и знаменатель (например, 3/7 или 9/2). Предусмотреть, чтобы знаменатель не был равен 0.
// Перегрузить:
// математические бинарные операторы (+, -, *, /) для выполнения действий с дробями
// унарный оператор (-)
// логические операторы сравнения двух дробей (==, !=, <, >, <=, >=).
// Примечание: Поскольку операторы < и >=, > и <= — это логические противоположности, попробуйте перегрузить один через другой.
// Продемонстрировать использование перегруженных операторов.


// 4. Создать класс Card, описывающий карту в игре БлэкДжек. У этого класса должно быть три поля: масть, значение карты и положение карты
// (вверх лицом или рубашкой). Сделать поля масть и значение карты типом перечисления (enum). Положение карты - тип bool.
// Также в этом классе должно быть два метода:
// метод Flip(), который переворачивает карту, т.е. если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот.
// метод GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.

int main(int argc, char const *argv[])
{
    // 1.
    Parallelogram parallelogram(20, 30, 45);
    Figure &par = parallelogram;
    printArea(par);

    Circle circle(50);
    Figure &cir = circle;
    printArea(cir);

    Rectangle rectangle(5, 10);
    Figure &rec = rectangle;
    printArea(rec);

    Square square(8);
    Figure &sqa = square;
    printArea(sqa);

    Rhombus rhombus(5, 45);
    Figure &rhmb = rhombus;
    printArea(rhmb);

    // 2.
    Minivan zafira("Opel", "Zafira", "Van", 7);

    // 3.
    Fraction fraction1(3,9);
    Fraction fraction2(2,5);

    std::cout << fraction1*fraction2 << std::endl;
    std::cout << fraction1/fraction2 << std::endl;
    std::cout << fraction1+fraction2 << std::endl;
    std::cout << fraction1-fraction2 << std::endl;
    std::cout << fraction1-2 << std::endl;
    std::cout << 2-fraction1 << std::endl;
    return 0;
}
